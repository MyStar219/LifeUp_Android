package com.orvibo.homemate.util;

/**
 * 过滤字符串中的Emoji表情
 *
 * @author smagret
 */
public class EmojiFilterUtil {
    private static final String TAG = EmojiFilterUtil.class.getSimpleName();

    /**
     * Ensures that all emoji in the given string will be displayed correctly by modifying the font for single symbols
     *
     * @param input the string to guarantee displayable emoji for
     * @return the string with adjusted fonts as a CharSequence
     */
    public static boolean containsEmoji(String input) {
        // if the input is null
        if (input == null) {
            // just return the input unchanged as it cannot be processed
            return false;
        }

        // extract the single chars that will be operated on
        final char[] chars = input.toCharArray();
        // create a SpannableStringBuilder instance where the font ranges will be set for emoji characters
        int codePoint;
        // check every char in the input text
        for (int i = 0; i < chars.length; i++) {
            // if the char is a leading part of a surrogate pair (Unicode)
            if (Character.isHighSurrogate(chars[i])) {
                // just ignore it and wait for the trailing part
                continue;
            }
            // if the char is a trailing part of a surrogate pair (Unicode)
            else if (Character.isLowSurrogate(chars[i])) {
                // if the char and its predecessor are indeed a valid surrogate pair
                if (i > 0 && Character.isSurrogatePair(chars[i - 1], chars[i])) {
                    // get the Unicode code point for the surrogate pair
                    codePoint = Character.toCodePoint(chars[i - 1], chars[i]);
                    // remember that we have a surrogate pair here (which counts as two characters)
                }
                // if the char and its predecessor are not actually a valid surrogate pair
                else {
                    // just ignore it
                    continue;
                }
            } else {
                // get the Unicode code point by simply casting the char to int
                codePoint = (int) chars[i];
            }
            // if the detected code point is a known emoji
            if (!isNotEmojiCharacter(codePoint)) {
                return true;
            }
        }
        return false;
    }

    private static int[] unicodeArray = {0x2600, 0x2601, 0x1F300, 0x1F301, 0x1F302, 0x1F303,
            0x1F304, 0x1F305, 0x1F306, 0x1F307, 0x1F308, 0x1F309, 0x1F30A, 0x1F30B, 0x1F30C,
            0x26C4, 0x26C5, 0x2614, 0x26A1, 0x1F30F, 0x1F311, 0x1F314, 0x1F313, 0x1F319, 0x1F315,
            0x1F31B, 0x1F31F, 0x1F320, 0x1F550, 0x1F551, 0x1F552, 0x1F553, 0x1F554, 0x1F555,
            0x1F556, 0x1F557, 0x1F558, 0x1F559, 0x1F55A, 0x1F55B, 0x231A, 0x231B, 0x23F0, 0x23F3,
            0x2648, 0x2649, 0x264A, 0x264B, 0x264C, 0x264D, 0x264E, 0x264F, 0x2650, 0x2651, 0x2652,
            0x2653, 0x26CE, 0x1F340, 0x1F337, 0x1F331,
            0x1F341, 0x1F338, 0x1F339, 0x1F342, 0x1F343, 0x1F33A, 0x1F33B, 0x1F334, 0x1F335,
            0x1F33E, 0x1F33D, 0x1F344, 0x1F330, 0x1F33C, 0x1F33F, 0x1F352, 0x1F34C, 0x1F34E,
            0x1F34A, 0x1F353, 0x1F349, 0x1F345, 0x1F346, 0x1F348, 0x1F34D, 0x1F347, 0x1F351,
            0x1F34F, 0x1F440, 0x1F442, 0x1F443, 0x1F444, 0x1F445, 0x1F484, 0x1F485, 0x1F486,
            0x1F487, 0x1F488, 0x1F464, 0x1F466, 0x1F467, 0x1F468, 0x1F469, 0x1F46A, 0x1F46B,
            0x1F46E, 0x1F46F, 0x1F470, 0x1F471, 0x1F472, 0x1F473, 0x1F474, 0x1F475, 0x1F476,
            0x1F477, 0x1F478, 0x1F479, 0x1F47A, 0x1F47B, 0x1F47C, 0x1F47D, 0x1F47E, 0x1F47F,
            0x1F480, 0x1F481, 0x1F482, 0x1F483, 0x1F40C, 0x1F40D, 0x1F40E, 0x1F414, 0x1F417,
            0x1F42B, 0x1F418, 0x1F428, 0x1F412, 0x1F411, 0x1F419, 0x1F41A, 0x1F41B, 0x1F41C,
            0x1F41D, 0x1F41E, 0x1F420, 0x1F421, 0x1F422, 0x1F424, 0x1F425, 0x1F426, 0x1F423,
            0x1F427, 0x1F429, 0x1F41F, 0x1F42C, 0x1F42D, 0x1F42F, 0x1F431, 0x1F433, 0x1F434,
            0x1F435, 0x1F436, 0x1F437, 0x1F43B, 0x1F439, 0x1F43A, 0x1F42E, 0x1F430, 0x1F438,
            0x1F43E, 0x1F432, 0x1F43C, 0x1F43D, 0x263A, 0x1F620, 0x1F629, 0x1F632, 0x1F61E,
            0x1F635, 0x1F630, 0x1F612, 0x1F60D, 0x1F624, 0x1F61C, 0x1F61D, 0x1F60B, 0x1F618,
            0x1F61A, 0x1F637, 0x1F633, 0x1F603, 0x1F605, 0x1F606, 0x1F601, 0x1F602, 0x1F60A,
            0x1F604, 0x1F622, 0x1F62D, 0x1F628, 0x1F623, 0x1F621, 0x1F60C, 0x1F616, 0x1F614,
            0x1F631, 0x1F62A, 0x1F60F, 0x1F613, 0x1F625, 0x1F62B, 0x1F609, 0x1F63A, 0x1F638,
            0x1F639, 0x1F63D, 0x1F63B, 0x1F63F, 0x1F63E, 0x1F63C, 0x1F640, 0x1F645, 0x1F646,
            0x1F647, 0x1F648, 0x1F64A, 0x1F649, 0x1F64B, 0x1F64C, 0x1F64D, 0x1F64E, 0x1F64F,
            0x1F3E0, 0x1F3E1, 0x1F3E2, 0x1F3E3, 0x1F3E5, 0x1F3E6, 0x1F3E7, 0x1F3E8, 0x1F3E9,
            0x1F3EA, 0x1F3EB, 0x1F3EC, 0x1F3EF, 0x1F3F0, 0x1F3ED, 0x1F3EE, 0x2693, 0x26EA,
            0x26F2, 0x1F5FB, 0x1F5FC, 0x1F5FD, 0x1F5FE, 0x1F5FF, 0x1F45E, 0x1F45F, 0x1F460,
            0x1F461, 0x1F462, 0x1F463, 0x1F453, 0x1F455, 0x1F456, 0x1F451, 0x1F454, 0x1F452,
            0x1F457, 0x1F458, 0x1F459, 0x1F45A, 0x1F45B, 0x1F45C, 0x1F45D, 0x1F4B0, 0x1F4B1,
            0x1F4B9, 0x1F4B2, 0x1F4B3, 0x1F4B4, 0x1F4B5, 0x1F4B8, 0x1F1E6, 0x1F1E7, 0x1F1E8,
            0x1F1E9, 0x1F1EA, 0x1F1EB, 0x1F1EC, 0x1F1ED, 0x1F1EE, 0x1F1EF, 0x1F1F0, 0x1F1F1,
            0x1F1F2, 0x1F1F3, 0x1F1F4, 0x1F1F5, 0x1F1F6, 0x1F1F7, 0x1F1F8, 0x1F1F9, 0x1F1FA,
            0x1F1FB, 0x1F1FC, 0x1F1FD, 0x1F1FE, 0x1F1FF, 0x1F1F3, 0x1F1EA, 0x1F1F8, 0x1F1F7,
            0x1F1E7, 0x1F1F9, 0x1F1F5, 0x1F1F7, 0x1F1FA, 0x1F1F8, 0x1F525, 0x1F526, 0x1F527,
            0x1F528, 0x1F529, 0x1F52A, 0x1F52B, 0x1F52E, 0x1F52F, 0x1F530, 0x1F531, 0x1F489,
            0x1F48A, 0x1F170, 0x1F171, 0x1F18E, 0x1F17E, 0x1F17F, 0x1F380, 0x1F381, 0x1F382,
            0x1F384, 0x1F385, 0x1F38C, 0x1F386, 0x1F388, 0x1F389, 0x1F38D, 0x1F38E, 0x1F393,
            0x1F392, 0x1F38F, 0x1F387, 0x1F390, 0x1F383, 0x1F38A, 0x1F38B, 0x1F391, 0x260E,
            0x1F4DF, 0x1F4DE, 0x1F4F1, 0x1F4F2, 0x1F4DD, 0x1F4E0, 0x1F4E8, 0x1F4E9, 0x1F4EA,
            0x1F4EB, 0x1F4EE, 0x1F4F0, 0x1F4E2, 0x1F4E3, 0x1F4E1, 0x1F4E4, 0x1F4E5, 0x1F4E6,
            0x1F4E7, 0x1F520, 0x1F521, 0x1F522, 0x1F523, 0x1F524, 0x2702, 0x2709, 0x270F,
            0x2712, 0x2714, 0x2716, 0x1F4BA, 0x1F4BB, 0x1F4CE, 0x1F4BC, 0x1F4BD, 0x1F4BE,
            0x1F4BF, 0x1F4C0, 0x1F4CD, 0x1F4C3, 0x1F4C4, 0x1F4C5, 0x1F4C1, 0x1F4C2, 0x1F4D3,
            0x1F4D6, 0x1F4D4, 0x1F4D5, 0x1F4D7, 0x1F4D8, 0x1F4D9, 0x1F4DA, 0x1F4DB, 0x1F4DC,
            0x1F4CB, 0x1F4C6, 0x1F4CA, 0x1F4C8, 0x1F4C9, 0x1F4C7, 0x1F4CC, 0x1F4D2, 0x1F4CF,
            0x1F4D0, 0x1F4D1, 0x26F3, 0x26F5, 0x26FA, 0x26FD, 0x1F3BD, 0x26BE, 0x1F3BE, 0x26BD,
            0x1F3BF, 0x1F3C0, 0x1F3C1, 0x1F3C2, 0x1F3C3, 0x1F3C4, 0x1F3C6, 0x1F3C8, 0x1F3CA,
            0x24C2, 0x1F683, 0x1F687, 0x1F684, 0x1F685, 0x1F697, 0x1F699, 0x1F68C, 0x1F68F,
            0x1F6A2, 0x1F689, 0x1F680, 0x1F6A4, 0x1F695, 0x1F69A, 0x1F692, 0x1F691, 0x1F693,
            0x1F6A5, 0x1F6A7, 0x1F6A8, 0x2668, 0x2708, 0x1F3A0, 0x1F3A1, 0x1F3A2, 0x1F3A3,
            0x1F3A4, 0x1F3A5, 0x1F3A6, 0x1F3A7, 0x1F3A8, 0x1F3A9, 0x1F3AA, 0x1F3AB, 0x1F3AC,
            0x1F3AD, 0x1F004, 0x1F3AE, 0x1F3AF, 0x1F3B0, 0x1F3B1, 0x1F3B2, 0x1F3B3, 0x1F3B4,
            0x1F0CF, 0x1F3B5, 0x1F3B6, 0x1F3B7, 0x1F3B8, 0x1F3B9, 0x1F3BA, 0x1F3BB, 0x1F3BC,
            0x303D, 0x1F4F7, 0x1F4F9, 0x1F4FA, 0x1F4FB, 0x1F4FC, 0x1F48B, 0x1F48C, 0x1F48D,
            0x1F48E, 0x1F48F, 0x1F490, 0x1F491, 0x1F492, 0x00A9, 0x00AE, 0x2122, 0x2139, 0x1F51E,
            0x20E3, 0x20E3, 0x20E3, 0x20E3, 0x20E3, 0x20E3, 0x20E3, 0x20E3, 0x20E3, 0x20E3, 0x20E3,
            0x1F51F, 0x1F4F6, 0x1F4F3, 0x1F4F4, 0x1F354, 0x1F359, 0x1F370, 0x1F35C, 0x1F35E, 0x1F373,
            0x1F366, 0x1F35F, 0x1F361, 0x1F358, 0x1F35A, 0x1F35D, 0x1F35B, 0x1F362, 0x1F363, 0x1F371,
            0x1F372, 0x1F367, 0x1F356, 0x1F365, 0x1F360, 0x1F355, 0x1F357, 0x1F368, 0x1F369, 0x1F36A,
            0x1F36B, 0x1F36C, 0x1F36D, 0x1F36E, 0x1F36F, 0x1F364, 0x1F374, 0x2615, 0x1F378, 0x1F37A,
            0x1F375, 0x1F376, 0x1F377, 0x1F37B, 0x1F379, 0x2194, 0x2195, 0x2197, 0x2198, 0x2196,
            0x2199, 0x2B06, 0x2B07, 0x2B05, 0x27A1, 0x2934, 0x2935, 0x25B6, 0x25C0, 0x23E9, 0x23EA,
            0x23EB, 0x23EC, 0x1F53A, 0x1F53B, 0x1F53C, 0x1F53D, 0x2B55, 0x274C, 0x274E, 0x2757,
            0x2753, 0x2754, 0x2755, 0x3030, 0x203C, 0x2049, 0x27B0, 0x27BF, 0x2764, 0x1F493,
            0x1F494, 0x1F495, 0x1F496, 0x1F497, 0x1F498, 0x1F499, 0x1F49A, 0x1F49B, 0x1F49C,
            0x1F49D, 0x1F49E, 0x1F49F, 0x2665, 0x2660, 0x2666, 0x2663, 0x267B, 0x267F, 0x26A0,
            0x26D4, 0x1F6AC, 0x1F6AD, 0x1F6A9, 0x1F6B2, 0x1F6B6, 0x1F6B9, 0x1F6BA, 0x1F6C0, 0x1F6BB,
            0x1F6BD, 0x1F6BE, 0x1F6BC, 0x1F6AA, 0x1F6AB, 0x1F191, 0x1F192, 0x1F193, 0x1F194, 0x1F195,
            0x1F196, 0x1F197, 0x1F198, 0x1F199, 0x1F19A, 0x1F201, 0x1F202, 0x1F21A, 0x1F22F, 0x1F232,
            0x1F233, 0x1F234, 0x1F235, 0x1F236, 0x1F237, 0x1F238, 0x1F239, 0x1F23A, 0x3299, 0x3297,
            0x1F250, 0x1F251, 0x2795, 0x2796, 0x2797, 0x1F4A0, 0x1F4A1, 0x1F4A2, 0x1F4A3, 0x1F4A4,
            0x1F4A5, 0x1F4A6, 0x1F4A7, 0x1F4A8, 0x1F4A9, 0x1F4AA, 0x1F4AB, 0x1F4AC, 0x2728, 0x2734,
            0x2733, 0x2744, 0x2747, 0x26AA, 0x26AB, 0x2B50, 0x1F534, 0x1F535, 0x1F532, 0x1F533,
            0x25AB, 0x25AA, 0x25FD, 0x25FE, 0x25FB, 0x25FC, 0x1F536, 0x1F537, 0x1F538, 0x1F539,
            0x2B1B, 0x2B1C, 0x1F4AE, 0x1F4AF, 0x21A9, 0x21AA, 0x1F503, 0x1F50A, 0x1F50B, 0x1F50C,
            0x1F50D, 0x1F50E, 0x1F512, 0x1F513, 0x1F50F, 0x1F510, 0x1F511, 0x1F514, 0x1F518,
            0x1F516, 0x1F517, 0x2611, 0x1F519, 0x1F51A, 0x1F51B, 0x1F51C, 0x1F51D, 0x2003, 0x2002,
            0x2005, 0x2705, 0x270A, 0x270B, 0x270C, 0x1F44A, 0x1F44D, 0x1F446, 0x1F447, 0x1F448,
            0x1F449, 0x1F44B, 0x1F44F, 0x1F44C, 0x1F44E, 0x1F450, 0x261D,
            //以下是三星手机表情字符UNICODE编码
            0x1f600,0x1f607,0x1f608,0x1f62f,0x1f610,0x1f611,0x1f615,0x1f62c,0x1f62c,0x1f634,0x1f62e,
            0x1f626,0x1f627,0x1f61f,0x1f636,0x1f61b,0x1f617,0x1f619,0x1f60e,0x1f46c,0x1f46d,0x1f465,
            0x1f465,0x1f465,0x1f465,0x1f465,0x1f465,
            //以下是英文输入法下特殊字符（,.?!:;~"'/*）(`()=\^#%&|{}[]<>$)
//            0x2c,0x2e,0x3f,0x21,0x3a,0x3b,0x7e,0x22,0x27,0x2f,0x2a,  0x60,0x28,0x29,0x3d,0x5c,0x5e,0x23,0x25,0x26,0x7c,0x7b,0x7d,0x5b,0x5d,0x3c,0x3e,0x24,
            //屏蔽Enter键
            0xa
    };

    /**
     * 判断是否是表情
     *
     * @param codePoint
     * @return true表示非表情
     */
    private static boolean isNotEmojiCharacter(int codePoint) {
        for (int i = 0; i < unicodeArray.length; i++) {
            if (codePoint == unicodeArray[i]) {
                return false;
            }
        }

       // LogUtil.d(TAG,"isNotEmojiCharacter() codePoint:" + Integer.toHexString(codePoint));
        return true;
    }

    /**
     * 过滤emoji 或者 其他非文字类型的字符
     *
     * @param source
     * @return
     */
    public static String filterEmoji(String source) {
        //LogUtil.d(TAG, "filterEmoji() - source:" + source);
        if (!containsEmoji(source)) {
            //LogUtil.d(TAG, "filterEmoji() - 不包含表情字符直接返回");
            return source;//如果不包含，直接返回
        }
        //到这里铁定包含
        StringBuilder buf = null;

        final char[] chars = source.toCharArray();
        // create a SpannableStringBuilder instance where the font ranges will be set for emoji characters
        int codePoint = 0;
        int len = source.length();

        for (int i = 0; i < chars.length; i++) {
            if (Character.isHighSurrogate(chars[i])) {

                continue;
            }
            // if the char is a trailing part of a surrogate pair (Unicode)
            else if (Character.isLowSurrogate(chars[i])) {
                // if the char and its predecessor are indeed a valid surrogate pair
                if (i > 0 && Character.isSurrogatePair(chars[i - 1], chars[i])) {
                    // get the Unicode code point for the surrogate pair
                    codePoint = Character.toCodePoint(chars[i - 1], chars[i]);
                    // remember that we have a surrogate pair here (which counts as two characters)
                }
            }else {
                // get the Unicode code point by simply casting the char to int
                codePoint = (int) chars[i];
            }
            // if the detected code point is a known emoji
            if (isNotEmojiCharacter(codePoint)) {
                if (buf == null) {
                    buf = new StringBuilder(source.length());
                }
                buf.append(chars[i]);
            }
        }

        if (buf == null) {
            //LogUtil.d(TAG, "filterEmoji() - buf==null");
            return "";//如果没有找到 emoji表情，则返回源字符串
        } else {
            if (buf.length() == len) {//这里的意义在于尽可能少的toString，因为会重新生成字符串
                buf = null;
                return source.trim();
            } else {
                return buf.toString().trim();
            }
        }

    }
}